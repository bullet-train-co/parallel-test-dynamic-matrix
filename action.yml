name: 'Parallel Test Dynamic Matrix'
description: 'Calculate a list of test runner groups for use with parallel_test'

inputs:
  numberOfTestNodes:
    description: 'Number of test nodes (4 if blank)'
    required: false
    type: number
  testRunnersPerNode:
    description: 'Test runners per node (if blank 4 for public repos, 2 for private repos)'
    required: false
    type: number
outputs:
  numberOfTestNodes:
    description: Number of test nodes
    value: ${{ steps.calculate_number_of_test_nodes.outputs.result }}
  testRunnersPerNode:
    description: Test runners per node
    value: ${{ steps.calculate_test_runners_per_node.outputs.result }}
  total_runners:
    description: The total number of runners
    value: ${{ steps.calculate_total_runners.outputs.result }}
  matrix:
    description: The matrix
    value: ${{ steps.calculate_matrix.outputs.result }}
  total_runners:
    description: The total number of runners
    value: ${{ steps.calculate_total_runners.outputs.result }}

runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v7
      id: calculate_number_of_test_nodes
      name: Calculate Number Of Test Nodes
      env:
        NUMBER_OF_TEST_NODES: ${{ inputs.numberOfTestNodes }}
      with:
        script: |
          var numberOfTestNodes = Number(process.env.NUMBER_OF_TEST_NODES) || 4
          console.log("numberOfTestNodes =====")
          console.log(numberOfTestNodes)
          return numberOfTestNodes
    - uses: actions/github-script@v7
      id: calculate_test_runners_per_node
      name: Calculate Test Runners Per Node
      env:
        REPO_VISIBILITY: ${{ github.event.repository.visibility }}
        TEST_RUNNERS_PER_NODE: ${{ inputs.testRunnersPerNode }}
      with:
        script: |
          var testRunnersPerNode = Number(process.env.TEST_RUNNERS_PER_NODE)
          if(!testRunnersPerNode){
            if(process.env.REPO_VISIBILITY == "public"){
              testRunnersPerNode = 4
            }else{
              testRunnersPerNode = 2
            }
          }
          console.log("testRunnersPerNode =====")
          console.log(testRunnersPerNode)
          return testRunnersPerNode
    - uses: actions/github-script@v7
      id: calculate_total_runners
      name: Calculate Total Runners
      env:
        NUMBER_OF_TEST_NODES: ${{ steps.calculate_number_of_test_nodes.outputs.result }}
        TEST_RUNNERS_PER_NODE: ${{ steps.calculate_total_runners.outputs.result }}
      with:
        script: |
          var numberOfTestNodes = Number(process.env.NUMBER_OF_TEST_NODES)
          var testRunnersPerNode = Number(process.env.TEST_RUNNERS_PER_NODE)
          console.log("total runners =====")
          console.log(testRunnersPerNode * numberOfTestNodes)
          return testRunnersPerNode * numberOfTestNodes

    - uses: actions/github-script@v7
      id: calculate_matrix
      name: Calculate Matrix
      env:
        NUMBER_OF_TEST_NODES: ${{ steps.calculate_number_of_test_nodes.outputs.result }}
        TEST_RUNNERS_PER_NODE: ${{ steps.calculate_total_runners.outputs.result }}
      with:
        script: |
          var numberOfTestNodes = Number(process.env.NUMBER_OF_TEST_NODES)
          var testRunnersPerNode = Number(process.env.TEST_RUNNERS_PER_NODE)
          try {
            var matrix = []
            for(var i = 1; i <= numberOfTestNodes; i++){
              var runners = []
              for(var j = 1; j <= testRunnersPerNode; j++){
                runners.push( (i - 1) * testRunnersPerNode + j );
              }
              matrix.push(runners.join(`,`))
            }
            console.log("matrix ====")
            console.log(matrix)
            return matrix
          } catch(err) {
            core.summary.addRaw("Error while calculating matrix", true)
            core.summary.addRaw(err.toString(), true)
            core.error("Error while calculating matrix")
            core.setFailed(err)
          }
